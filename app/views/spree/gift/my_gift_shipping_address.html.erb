<div class="container">
  <%= form_for @order, url: update_checkout_path(@order.state), html: { id: "checkout_form_address" } do |form| %>

  <div class="text form-content clearfix">
    <div class="title" style="font-weight: 600; font-size: 20px; margin-top: 60px"><%= Spree.t(:shipping_address) %></div>
    <div class="col-sm-6">
      <label><%= Spree.t(:first_name) %><abbr class="required" title="required">*</abbr></label>
      <input type="text" v-model="first_name" id="first_name" name="first_name" required/>
      <label><%= Spree.t(:last_name) %><abbr class="required" title="required">*</abbr></label>
      <input type="text" v-model="last_name" name="last_name" required/>
      <label><%= Spree.t(:street_address) %><abbr class="required" title="required">*</abbr></label>
      <input type="text" v-model="address" name="address" required/>
      <label><%= Spree.t(:street_address_2) %></label>
      <input type="text" v-model="address_opt"/>
      <label><%= Spree.t(:phone) %><abbr class="required" title="required">*</abbr></label>
      <input type="text" v-model="phone" name="phone" required/>
    </div>
    <div class="col-sm-6" id="scountry">
      <label><%= Spree.t(:city) %><abbr class="required" title="required">*</abbr></label>
      <input type="text" v-model="city" required/>
      <label><%= Spree.t(:country) %><abbr class="required" title="required">*</abbr></label>
      <%= form.fields_for :ship_address do |ship_form| %>
      <span id=<%="scountry-selection" %>>
      <%= ship_form.collection_select :country_id, available_countries, :id, :name, {}, {:class => 'form-control required', :'v-model' => 'country_code'} %>
      </span>
      <% if Spree::Config[:address_requires_state] %>
        <p class="form-group" id=<%="sstate" %>>
          <%= ship_form.label :state do %>
            <%= Spree.t(:state) %><abbr class='required' title="required">*</abbr>
          <% end %>

          <%== state_elements = [
             ship_form.collection_select(:state_id, @order.ship_address.country.states,
                                                         :id, :name, {},
                                {:"v-model" => "state_code", :"class" => "required"},
                                )
             ].join.gsub('"', "'").gsub("\n", "")
          %>
        </p>
      <% end %>
      <% end %>
      <label><%= Spree.t(:zip) %><abbr class="required" title="required">*</abbr></label>
      <input type="text" v-model="zip" name="zip" required/><br>
      <label for="save_user_address">
        <input type="checkbox" placeholder="save_address" v-model="save_address" required/>
        <%= Spree.t(:save_my_address) %>
      </label>
    </div>
  </div>
  <div class="col-sm-6"><button type='button' class="button" v-on:click="proceed"><%= Spree.t(:save_and_continue)%></button></div>
  <% end %>
</div>

<script>
  var validator = $("#checkout_form_address").validate();
  var vm = new Vue({
    el: '#content',
    data: {
      order_number: "<%= @order.number %>",
      order_token: "<%= @order.guest_token %>",

      first_name: "",
      last_name: "",
      address: "",
      address_opt: "",
      phone: "",
      city: "",
      country_code: <%= @order.ship_address.country_id %>,
      state_code: 0,
      zip: "",
      save_address: true,

      special_instructions_hash: <%= JSON.parse(@order.special_instructions).to_json.html_safe %>

    },
    computed: {
      ship_address: function() {
        var h = {}
        h["firstname"] = this.first_name
        h["lastname"] = this.last_name
        h["address1"] = this.address
        h["address2"] = this.address_opt
        h["phone"] = this.phone
        h["city"] = this.city
        h["country_id"] = this.country_code
        h["state_id"] = this.state_code
        h["zipcode"] = this.zip
        return h
      },
      json: function() {
        /*
           To advance to the next state, delivery, the order will first need both a shipping and shiping address.
           Once valid address information has been submitted, the shipments and shipping rates available for this order will be returned inside a shipments key inside the order
        */
        var h = {
            "order": {
              "ship_address_attributes": this.ship_address,
            }
          }
        return h
      }
    },
    methods: {
      proceed: function(){
        if (!validator.form()){
          validator.focusInvalid()
          return
        }
        $.ajax({
          type: "PUT",
          url: '/api/v1/orders/' + this.order_number + '?order_token=' + this.order_token,
          success: function(data) {
            window.location.href = '<%= gift_path %>/my_gift_completion'
          },
          error: function(data) {
            alert(data.responseJSON["errors"].join("\n") )
          },
          data: this.json
        })
      }
    },
    ready: function(){
      $('#link-to-cart').remove()
      $('#order_ship_address_attributes_country_id')[0].disabled = true
    }
  })
</script>
